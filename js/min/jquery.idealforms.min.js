/*--------------------------------------------------------------------------

  jq-idealforms 2.0

  * Author: Cedric Ruiz
  * License: GPL or MIT
  * Demo: http://elclanrs.github.com/jq-idealforms/
  *

--------------------------------------------------------------------------*/(function($) {
  "use strict";
  $.idealforms = {};
  var Utils = {
    getMaxWidth: function($elms) {
      var maxWidth = 0;
      return $elms.each(function() {
        $(this).outerWidth() > maxWidth && (maxWidth = $(this).outerWidth());
      }), maxWidth;
    },
    getLessVar: function(name, prop) {
      var value = $('<p class="' + name + '"></p>').hide().appendTo("body").css(prop);
      return $("." + name).remove(), /^\d+/.test(value) ? parseInt(value, 10) : value;
    },
    getKeys: function(obj) {
      var keys = [];
      for (var key in obj) keys.push(key);
      return keys;
    },
    isFunction: function(obj) {
      return typeof obj == "function";
    },
    isRegex: function(obj) {
      return obj instanceof RegExp;
    },
    getByNameOrId: function(str) {
      if ($('[name="' + str + '"]').length) return $('[name="' + str + '"]');
      if ($('[name="' + str + '"]').length) return $("#" + str);
      $.error('The field "' + str + "\" doesn't exist.");
    },
    getIdealType: function($el) {
      var type = $el.attr("type") || $el[0].tagName.toLowerCase();
      return /(text|password|email|number|search|url|tel)/.test(type) && "text" || /file/.test(type) && "file" || /select/.test(type) && "select" || /(radio|checkbox)/.test(type) && "radiocheck" || /(button|submit|reset)/.test(type) && "button" || /h\d/.test(type) && "description" || /hr/.test(type) && "separator";
    },
    makeInput: function(name, type, list, placeholder) {
      var markup, items = [], i, len;
      /(text|password|email|number|search|url|tel|file)/.test(type) && (markup = '<input type="' + type + '" ' + 'id="' + name + '" ' + 'name="' + name + '" ' + (placeholder && 'placeholder="' + placeholder + '"') + "/>");
      if (/select/.test(type)) {
        items = [];
        for (i = 0, len = list.length; i < len; i++) items.push('<option value="' + list[i] + '">' + list[i] + "</option>");
        markup = '<select id="' + name + '" name="' + name + '">' + items.join("") + "</select>";
      }
      if (/(radio|checkbox)/.test(type)) {
        items = [];
        for (i = 0, len = list.length; i < len; i++) items.push('<label><input type="' + type + '" name="' + name + '" value="' + list[i] + '" />' + list[i] + "</label>");
        markup = items.join("");
      }
      return markup;
    }
  };
  $.fn.idealTabs = function(ops) {
    var o = $.extend({
      tabContainer: ""
    }, ops), $contents = this, $container = $(o.tabContainer), $wrapper = $('<ul class="ideal-tabs-wrap"/>'), $tabs = function() {
      var tabs = [];
      return $contents.each(function() {
        var $fs = $(this), name = $fs.attr("name"), html = '<li class="ideal-tabs-tab"><span>' + name + "</span>" + '<i class="ideal-tabs-tab-counter ideal-tabs-tab-counter-zero">0</i>' + "</li>";
        tabs.push(html);
      }), $(tabs.join(""));
    }(), Actions = {
      getCurIdx: function() {
        return $tabs.filter(".ideal-tabs-tab-active").index();
      },
      getTabIdxByName: function(name) {
        var re = new RegExp(name, "i"), $tab = $tabs.filter(function() {
          return re.test($(this).text());
        }), idx = $tab.index();
        return idx;
      }
    }, Methods = {
      switchTab: function(ops) {
        var def = $.extend({
          name: "",
          idx: null
        }, ops), idx = def.idx !== null ? def.idx : Actions.getTabIdxByName(def.name);
        $tabs.removeClass("ideal-tabs-tab-active"), $tabs.eq(idx).addClass("ideal-tabs-tab-active"), $contents.hide().eq(idx).show();
      },
      nextTab: function() {
        var idx = Actions.getCurIdx() + 1;
        idx > $tabs.length - 1 ? Methods.firstTab() : Methods.switchTab({
          idx: idx
        });
      },
      prevTab: function() {
        var idx = Actions.getCurIdx() - 1;
        Methods.switchTab({
          idx: idx
        });
      },
      firstTab: function() {
        Methods.switchTab({
          idx: 0
        });
      },
      lastTab: function() {
        Methods.switchTab({
          idx: $tabs.length - 1
        });
      },
      updateCounter: function(name, text) {
        var idx = Actions.getTabIdxByName(name), $counter = $tabs.eq(idx).find(".ideal-tabs-tab-counter");
        $counter.removeClass("ideal-tabs-tab-counter-zero"), text || $counter.addClass("ideal-tabs-tab-counter-zero"), $counter.attr("title", "Invalid fields").html(text);
      }
    };
    for (var m in Methods) $contents[m] = Methods[m];
    return $tabs.first().addClass("ideal-tabs-tab-active").end().click(function() {
      var name = $(this).text();
      $contents.switchTab({
        name: name
      });
    }), $wrapper.append($tabs).appendTo($container), $contents.addClass("ideal-tabs-content").each(function() {
      var $this = $(this), name = $(this).attr("name");
      $this.data("ideal-tabs-content-name", name).removeAttr("name");
    }).hide().first().show(), $contents;
  }, $.fn.idealSelect = function() {
    return this.each(function() {
      var $select = $(this), $options = $select.find("option"), idealSelect = function() {
        var $wrap = $('<ul class="ideal-select ' + $select.attr("name") + '"/>'), $menu = $('<li><span class="ideal-select-title">' + $options.filter(":selected").text() + "</span></li>"), items = function() {
          var items = [];
          return $options.each(function() {
            var $this = $(this);
            items.push('<li class="ideal-select-item">' + $this.text() + "</li>");
          }), items;
        }();
        return $menu.append('<ul class="ideal-select-sub">' + items.join("") + "</ul>"), $wrap.append($menu), {
          select: $wrap,
          title: $menu.find(".ideal-select-title"),
          sub: $menu.find(".ideal-select-sub"),
          items: $menu.find(".ideal-select-item")
        };
      }(), Actions = {
        getSelectedIdx: function() {
          return idealSelect.items.filter(".ideal-select-item-selected").index();
        },
        init: function() {
          $select.css({
            position: "absolute",
            left: "-9999px"
          }), idealSelect.sub.hide(), idealSelect.select.insertAfter($select), idealSelect.select.css("min-width", Utils.getMaxWidth(idealSelect.items)), idealSelect.items.eq($options.filter(":selected").index()).addClass("ideal-select-item-selected");
        }(),
        noWindowScroll: function(e) {
          (e.which === 40 || e.which === 38 || e.which === 13) && e.preventDefault();
        },
        focusHack: function() {
          setTimeout(function() {
            $select.trigger("focus");
          }, 1);
        },
        focus: function() {
          idealSelect.select.addClass("ideal-select-focus"), $(document).on("keydown.noscroll", Actions.noWindowScroll);
        },
        blur: function() {
          idealSelect.select.removeClass("ideal-select-open ideal-select-focus"), $(document).off(".noscroll");
        },
        scrollIntoView: function(dir) {
          var $selected = idealSelect.items.filter(".ideal-select-item-selected"), itemHeight = idealSelect.items.outerHeight(), menuHeight = idealSelect.sub.outerHeight(), isInView = function() {
            var elPos = $selected.position().top + itemHeight;
            return dir === "down" ? elPos <= menuHeight : elPos > 0;
          }();
          isInView || (itemHeight = dir === "down" ? itemHeight : -itemHeight, idealSelect.sub.scrollTop(idealSelect.sub.scrollTop() + itemHeight));
        },
        scrollToItem: function() {
          var idx = Actions.getSelectedIdx(), height = idealSelect.items.outerHeight(), nItems = idealSelect.items.length, allHeight = height * nItems, curHeight = height * (nItems - idx);
          idealSelect.sub.scrollTop(allHeight - curHeight);
        },
        showMenu: function() {
          idealSelect.sub.fadeIn("fast"), idealSelect.select.addClass("ideal-select-open"), Actions.select(Actions.getSelectedIdx()), Actions.scrollToItem();
        },
        hideMenu: function() {
          idealSelect.sub.hide(), idealSelect.select.removeClass("ideal-select-open");
        },
        select: function(idx) {
          idealSelect.items.removeClass("ideal-select-item-selected"), idealSelect.items.eq(idx).addClass("ideal-select-item-selected");
        },
        change: function(idx) {
          var text = idealSelect.items.eq(idx).text();
          Actions.select(idx), idealSelect.title.text(text), $options.eq(idx).prop("selected", !0), $select.trigger("change");
        },
        keydown: function(key) {
          var idx = Actions.getSelectedIdx(), isMenu = idealSelect.select.is(".ideal-select-menu"), isOpen = idealSelect.select.is(".ideal-select-open"), keys = {
            9: function() {
              isMenu && (Actions.blur(), Actions.hideMenu());
            },
            13: function() {
              isMenu && (isOpen ? Actions.hideMenu() : Actions.showMenu()), Actions.change(idx);
            },
            27: function() {
              isMenu && Actions.hideMenu();
            },
            40: function() {
              idx < $options.length - 1 && (isOpen ? Actions.select(idx + 1) : Actions.change(idx + 1)), Actions.scrollIntoView("down");
            },
            38: function() {
              idx > 0 && (isOpen ? Actions.select(idx - 1) : Actions.change(idx - 1)), Actions.scrollIntoView("up");
            },
            "default": function() {
              var letter = String.fromCharCode(key), $matches = idealSelect.items.filter(function() {
                var re = new RegExp("^" + letter, "i");
                return re.test($(this).text());
              }), nMatches = $matches.length, counter = idealSelect.select.data("counter") + 1 || 0, curKey = idealSelect.select.data("key") || key, newIdx = $matches.eq(counter).index();
              if (!nMatches) return !1;
              curKey === key ? counter < nMatches ? idealSelect.select.data("counter", counter) : (idealSelect.select.data("counter", 0), newIdx = $matches.eq(0).index()) : (idealSelect.select.data("counter", 0), newIdx = $matches.eq(0).index()), isOpen ? Actions.select(newIdx) : Actions.change(newIdx), idealSelect.select.data("key", key), Actions.scrollToItem(), Actions.focusHack();
            }
          };
          keys[key] ? keys[key]() : keys["default"]();
        }
      }, events = {
        focus: Actions.focus,
        "blur.menu": function() {
          Actions.blur(), Actions.hideMenu();
        },
        "blur.list": function() {
          Actions.blur();
        },
        keydown: function(e) {
          Actions.keydown(e.which);
        },
        "clickItem.menu": function() {
          Actions.change($(this).index()), Actions.hideMenu();
        },
        "clickItem.list": function() {
          Actions.change($(this).index());
        },
        "clickTitle.menu": function() {
          Actions.focus(), Actions.showMenu(), $select.trigger("focus");
        },
        "hideOutside.menu": function() {
          $select.off("blur.menu"), $(document).on("mousedown.ideal", function(evt) {
            $(evt.target).closest(idealSelect.select).length ? Actions.focusHack() : ($(document).off("mousedown.ideal"), $select.on("blur.menu", events["blur.menu"]));
          });
        },
        "mousedown.list": function() {
          Actions.focusHack();
        }
      }, disableEvents = function() {
        idealSelect.select.removeClass("ideal-select-menu ideal-select-list"), $select.off(".menu .list"), idealSelect.items.off(".menu .list"), idealSelect.select.off(".menu .list"), idealSelect.title.off(".menu .list");
      };
      idealSelect.select.on("menu", function() {
        disableEvents(), idealSelect.select.addClass("ideal-select-menu"), Actions.hideMenu(), $select.on({
          "blur.menu": events["blur.menu"],
          "focus.menu": events.focus,
          "keydown.menu": events.keydown
        }), idealSelect.select.on("mousedown.menu", events["hideOutside.menu"]), idealSelect.items.on("click.menu", events["clickItem.menu"]), idealSelect.title.on("click.menu", events["clickTitle.menu"]);
      }), idealSelect.select.on("list", function() {
        disableEvents(), idealSelect.select.addClass("ideal-select-list"), Actions.showMenu(), $select.on({
          "blur.list": events["blur.list"],
          "focus.list": events.focus,
          "keydown.list": events.keydown
        }), idealSelect.select.on("mousedown.list", events["mousedown.list"]), idealSelect.items.on("mousedown.list", events["clickItem.list"]);
      }), $select.keydown(function(e) {
        e.which !== 9 && e.preventDefault();
      }), idealSelect.select.on("reset", function() {
        Actions.change(0);
      }), idealSelect.select.trigger("menu");
    });
  }, $.fn.idealRadioCheck = function() {
    return this.each(function() {
      var $this = $(this), $span = $("<span/>");
      $this.is(":checkbox") ? $span.addClass("ideal-check") : $span.addClass("ideal-radio"), $this.is(":checked") && $span.addClass("checked"), $span.insertAfter($this), $(this).parent("label").attr("onclick", ""), $this.css({
        position: "absolute",
        left: "-9999px"
      }).on({
        change: function() {
          var $this = $(this);
          $this.trigger("focus"), $this.is(":radio") ? ($this.parent().siblings("label").children(".ideal-radio").removeClass("checked"), $this.is(":checked") && $this.next(".ideal-radio").addClass("checked")) : $this.is(":checked") ? $span.addClass("checked") : $span.removeClass("checked");
        },
        focus: function() {
          $span.parent().addClass("focus");
        },
        blur: function() {
          $span.parent().removeClass("focus");
        },
        click: function() {
          $(this).trigger("focus");
        }
      });
    });
  }, $.fn.idealFile = function() {
    var multipleSupport = typeof $("input")[0].multiple != "undefined";
    return this.each(function() {
      var $file = $(this), $wrap = $('<div class="ideal-file-wrap">'), $input = $('<input type="text" class="ideal-file-filename" />'), $button = $('<button type="button" class="ideal-file-upload">Open</button>');
      $file.css({
        position: "absolute",
        left: "-9999px"
      }), $button.attr("tabIndex", -1).click(function() {
        $file.trigger("click");
      }), $file.attr("tabIndex", -1).on({
        change: function() {
          var files = [], fileArr, filename;
          if (multipleSupport) {
            fileArr = $file[0].files;
            for (var i = 0, len = fileArr.length; i < len; i++) files.push(fileArr[i].name);
            filename = files.join(", ");
          } else filename = $file.val().split("\\").pop();
          $input.val(filename), $input.attr("title", filename);
        },
        focus: function() {
          $input.trigger("focus");
        }
      }), $input.on({
        keyup: function() {
          $file.trigger("change");
        },
        focus: function() {
          $file.trigger("change");
        },
        blur: function() {
          $file.trigger("blur");
        },
        keydown: function(e) {
          e.which === 13 && $file.trigger("click"), (e.which === 8 || e.which === 46) && $file.val("");
        }
      }), $wrap.append($button, $input).insertAfter($file);
    });
  }, $.idealforms.errors = {
    required: "This field is required.",
    number: "Must be a number.",
    digits: "Must be only digits.",
    name: "Must be at least 3 characters long, and must only contain letters.",
    username: "Must be at between 4 and 32 characters long and start with a letter. You may use letters, numbers, underscores, and one dot (.)",
    pass: "Must be at least 6 characters long, and contain at least one number, one uppercase and one lowercase letter.",
    strongpass: "Must be at least 8 characters long and contain at least one uppercase and one lowercase letter and one number or special character.",
    email: "Must be a valid e-mail address. <em>(e.g. user@gmail.com)</em>",
    phone: "Must be a valid US phone number. <em>(e.g. 555-123-4567)</em>",
    zip: "Must be a valid US zip code. <em>(e.g. 33245 or 33245-0003)</em>",
    url: "Must be a valid URL. <em>(e.g. www.google.com)</em>",
    minChar: "Must be at least <strong>{0}</strong> characters long.",
    minOption: "Check at least <strong>{0}</strong> options.",
    maxChar: "No more than <strong>{0}</strong> characters long.",
    maxOption: "No more than <strong>{0}</strong> options allowed.",
    range: "Must be a number between {0} and {1}.",
    date: "Must be a valid date. <em>(e.g. {0})</em>",
    dob: "Must be a valid date of birth.",
    exclude: '"{0}" is not available.',
    excludeOption: "{0}",
    equalto: 'Must be the same value as <strong>"{0}"</strong>',
    extension: 'File(s) must have a valid extension. <em>(e.g. "{0}")</em>'
  }, $.idealforms.filters = {};
  var getFilters = function() {
    var filters = {
      required: {
        error: $.idealforms.errors.required
      },
      number: {
        regex: /\d+/,
        error: $.idealforms.errors.number
      },
      digits: {
        regex: /^\d+$/,
        error: $.idealforms.errors.digits
      },
      name: {
        regex: /^[A-Za-z]{3,}$/,
        error: $.idealforms.errors.name
      },
      username: {
        regex: /^[a-z](?=[\w.]{3,31}$)\w*\.?\w*$/i,
        error: $.idealforms.errors.username
      },
      pass: {
        regex: /(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{6,}/,
        error: $.idealforms.errors.pass
      },
      strongpass: {
        regex: /(?=^.{8,}$)((?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$/,
        error: $.idealforms.errors.strongpass
      },
      email: {
        regex: /[^@]+@[^@]/,
        error: $.idealforms.errors.email
      },
      phone: {
        regex: /^[2-9]\d{2}-\d{3}-\d{4}$/,
        error: $.idealforms.errors.phone
      },
      zip: {
        regex: /^\d{5}$|^\d{5}-\d{4}$/,
        error: $.idealforms.errors.zip
      },
      url: {
        regex: /^(?:(ftp|http|https):\/\/)?(?:[\w\-]+\.)+[a-z]{3,6}$/i,
        error: $.idealforms.errors.url
      },
      min: {
        regex: function(input, value) {
          var $input = input.input, min = input.userOptions.data && input.userOptions.data.min, isRadioCheck = $input.is('[type="checkbox"], [type="radio"]');
          return isRadioCheck ? (this.error = $.idealforms.errors.minOption.replace("{0}", min), $input.filter(":checked").length >= min) : (this.error = $.idealforms.errors.minChar.replace("{0}", min), value.length >= min);
        }
      },
      max: {
        regex: function(input, value) {
          var $input = input.input, max = input.userOptions.data && input.userOptions.data.max, isRadioCheck = $input.is('[type="checkbox"], [type="radio"]');
          return isRadioCheck ? (this.error = $.idealforms.errors.maxOption.replace("{0}", max), $input.filter(":checked").length <= max) : (this.error = $.idealforms.errors.maxChar.replace("{0}", max), value.length <= max);
        }
      },
      range: {
        regex: function(input, value) {
          var range = input.userOptions.data.range, val = +value;
          return this.error = $.idealforms.errors.range.replace("{0}", range[0]).replace("{1}", range[1]), val >= range[0] && val <= range[1];
        }
      },
      date: {
        regex: function(input, value) {
          var userFormat = input.userOptions.data && input.userOptions.data.date ? input.userOptions.data.date : "mm/dd/yyyy", delimiter = /[^mdy]/.exec(userFormat)[0], theFormat = userFormat.split(delimiter), theDate = value.split(delimiter), isDate = function(date, format) {
            var m, d, y;
            for (var i = 0, len = format.length; i < len; i++) /m/.test(format[i]) && (m = date[i]), /d/.test(format[i]) && (d = date[i]), /y/.test(format[i]) && (y = date[i]);
            return m > 0 && m < 13 && y && y.length === 4 && d > 0 && d <= (new Date(y, m, 0)).getDate();
          };
          return this.error = $.idealforms.errors.date.replace("{0}", userFormat), isDate(theDate, theFormat);
        }
      },
      dob: {
        regex: function(input, value) {
          var userFormat = input.userOptions.data && input.userOptions.data.dob ? input.userOptions.data.dob : "mm/dd/yyyy", dateInput = {
            input: input.input,
            userOptions: {
              data: {
                date: userFormat
              }
            }
          }, isDate = filters.date.regex(dateInput, value), theYear = /\d{4}/.exec(value), maxYear = (new Date).getFullYear(), minYear = maxYear - 100;
          return this.error = $.idealforms.errors.dob, isDate && theYear >= minYear && theYear <= maxYear;
        }
      },
      exclude: {
        regex: function(input, value) {
          var i = input.input;
          return i.is('[type="checkbox"], [type="radio"], select') ? this.error = $.idealforms.errors.excludeOption.replace("{0}", value) : this.error = $.idealforms.errors.exclude.replace("{0}", value), !~$.inArray(value, input.userOptions.data.exclude);
        }
      },
      equalto: {
        regex: function(input, value) {
          var $equals = $(input.userOptions.data.equalto), $input = input.input, name = $equals.attr("name") || $equals.attr("id"), isValid = $equals.parents(".ideal-field").filter(function() {
            return $(this).data("isValid") === !0;
          }).length;
          return isValid ? (this.error = $.idealforms.errors.equalto.replace("{0}", name), $input.val() === $equals.val()) : !1;
        }
      },
      extension: {
        regex: function(input, value) {
          var files = input.input[0].files || [ {
            name: value
          } ], extensions = input.userOptions.data.extension, re = new RegExp("\\." + extensions.join("|") + "$", "i"), valid = !1;
          for (var i = 0, len = files.length; i < len; i++) valid = re.test(files[i].name) ? !0 : !1;
          return this.error = $.idealforms.errors.extension.replace("{0}", extensions.join('", "')), valid;
        }
      }
    };
    return filters;
  }, Flags = {
    noerror: function(i) {
      i.parent().siblings(".error").hide();
    },
    noicons: function(i) {
      i.siblings(".valid-icon, .invalid-icon").hide();
    },
    novalidicon: function(i) {
      i.siblings(".valid-icon").hide();
    },
    noinvalidicon: function(i) {
      i.siblings(".invalid-icon").hide();
    },
    noclass: function(i) {
      i.parents(".ideal-field").removeClass("valid invalid");
    },
    novalidclass: function(i) {
      i.parents(".ideal-field").removeClass("valid");
    },
    noinvalidclass: function(i) {
      i.parents(".ideal-field").removeClass("invalid");
    }
  };
  $.fn.idealforms = function(ops) {
    $.extend($.idealforms.filters, getFilters());
    var $form = this, o = $.extend({
      inputs: {},
      customFilters: {},
      customFlags: {},
      globalFlags: "",
      onSuccess: function(e) {
        alert("Thank you...");
      },
      onFail: function() {
        alert($form.getInvalid().length + " invalid fields.");
      },
      responsiveAt: "auto",
      customInputs: !0
    }, ops), $idealTabs = function() {
      var $t = !1, $tabs = $form.find("section");
      return $tabs.length && ($form.prepend('<div class="ideal-wrap ideal-tabs ideal-full-width"/>'), $t = $tabs.idealTabs({
        tabContainer: ".ideal-tabs"
      })), $t;
    }(), getFormInputs = function() {
      return {
        inputs: $form.find("input, select, textarea, :button"),
        labels: $form.find("div > label:first-child"),
        text: $form.find('input:not([type="checkbox"], [type="radio"]), textarea'),
        select: $form.find("select"),
        radiocheck: $form.find('input[type="radio"], input[type="checkbox"]'),
        buttons: $form.find(":button"),
        file: $form.find('input[type="file"]'),
        headings: $form.find("h1, h2, h3, h4, h5, h6, p"),
        separators: $form.find("hr")
      };
    }, getUserInputs = function() {
      return $form.find('[name="' + Utils.getKeys(o.inputs).join('"], [name="') + '"]');
    }, LessVars = {
      fieldWidth: Utils.getLessVar("ideal-field-width", "width")
    }, Actions = {
      getTab: function(tabName) {
        return $idealTabs.filter(function() {
          var re = new RegExp(tabName, "i");
          return re.test($(this).data("ideal-tabs-content-name"));
        });
      },
      getCurrentTab: function($input) {
        var $tabContent = $input.parents(".ideal-tabs-content"), tabName = $tabContent.data("ideal-tabs-content-name"), $fields = $($tabContent.find(".ideal-field").parents(".ideal-wrap").get().reverse());
        return {
          content: $tabContent,
          name: tabName,
          fields: $fields
        };
      },
      doMarkup: function($el) {
        var type = Utils.getIdealType($el), addValidationEls = function() {
          var $error = $('<span class="ideal-error" />'), $valid = $('<i class="ideal-icon ideal-icon-valid" />'), $invalid = $("<i/>", {
            "class": "ideal-icon ideal-icon-invalid",
            click: function() {
              var $this = $(this);
              $this.siblings("label").length ? $this.siblings("label:first").find("input").focus() : $this.siblings("input, select, textarea").focus();
            }
          });
          $el.parents(".ideal-field").append($valid.add($invalid).hide()).after($error.hide());
        }, idealTypes = {
          "default": $.noop,
          defaultInput: function() {
            $el.wrapAll('<span class="ideal-field"/>'), addValidationEls();
          },
          button: function() {
            o.customInputs && $el.addClass("ideal-button");
          },
          file: function() {
            idealTypes.defaultInput(), o.customInputs && $el.idealFile();
          },
          select: function() {
            idealTypes.defaultInput(), o.customInputs && $el.idealSelect();
          },
          text: function() {
            idealTypes.defaultInput();
          },
          radiocheck: function() {
            var isWrapped = $el.parents(".ideal-field").length, $all = $el.parent().siblings("label:not(:first)").andSelf();
            o.customInputs && $el.idealRadioCheck();
            if (!!isWrapped) return !1;
            $all.wrapAll('<span class="ideal-field ideal-radiocheck"/>'), addValidationEls();
          },
          description: function() {
            var isWrapped = $el.parents(".ideal-field").length, $all = $el.siblings().andSelf();
            $el.closest("div").addClass("ideal-full-width"), isWrapped || $all.wrapAll('<span class="ideal-heading"/>');
          },
          separator: function() {
            $el.closest("div").addClass("ideal-full-width"), $el.wrapAll('<div class="ideal-separator"/>');
          }
        };
        $el.closest("div").addClass("ideal-wrap"), idealTypes[type] ? idealTypes[type]() : idealTypes["default"]();
      },
      adjust: function() {
        var formInputs = getFormInputs(), userInputs = getUserInputs();
        formInputs.inputs.attr("autocomplete", "off"), $form.find("." + Utils.getKeys($.idealforms.filters).join(", .")).each(function() {
          o.inputs[this.name] = {
            filters: this.className
          };
        }), formInputs.labels.addClass("ideal-label").width(Utils.getMaxWidth(formInputs.labels)), $idealTabs.length ? $idealTabs.each(function() {
          $(this).find(".ideal-heading:first").addClass("first-child");
        }) : $form.find(".ideal-heading:first").addClass("first-child"), jQuery.ui && $form.find("input.date").each(function() {
          var userInput = o.inputs[this.name], data = userInput.data && userInput.data.date, format = data ? data.replace("yyyy", "yy") : "mm/dd/yy";
          $(this).datepicker({
            dateFormat: format,
            beforeShow: function(input) {
              $(input).addClass("open");
            },
            onChangeMonthYear: function() {
              var w = $(this).outerWidth();
              setTimeout(function() {
                $(this).datepicker("widget").width(w);
              }, 1);
            },
            onClose: function() {
              $(this).removeClass("open");
            }
          });
        }).on("focus keyup", function() {
          var t = $(this), w = t.outerWidth();
          t.datepicker("widget").width(w);
        }).parent().siblings(".ideal-error").addClass("hidden"), "placeholder" in $("<input/>")[0] || formInputs.text.each(function() {
          $(this).val($(this).attr("placeholder"));
        }).on({
          focus: function() {
            this.value === $(this).attr("placeholder") && $(this).val("");
          },
          blur: function() {
            $(this).val() || $(this).val($(this).attr("placeholder"));
          }
        });
      },
      init: function() {
        var formInputs = getFormInputs();
        $form.css("visibility", "visible").addClass("ideal-form"), $form.attr("novalidate", "novalidate"), jQuery.ui && ($.datepicker._checkOffset = function(a, b, c) {
          return b;
        }), formInputs.inputs.add(formInputs.headings).add(formInputs.separators).each(function() {
          Actions.doMarkup($(this));
        }), Actions.adjust();
      },
      validate: function(input, value) {
        var isValid = !0, error = "", $input = input.input, userOptions = input.userOptions, userFilters = userOptions.filters;
        if (userFilters) {
          !value && /required/.test(userFilters) && (error = userOptions.errors && userOptions.errors.required ? userOptions.errors.required : $.idealforms.errors.required, isValid = !1);
          if (value) {
            console.log($input), userFilters = userFilters.split(/\s/);
            for (var i = 0, len = userFilters.length; i < len; i++) {
              var uf = userFilters[i], theFilter = $.idealforms.filters[uf] || {};
              if (theFilter && (Utils.isFunction(theFilter.regex) && !theFilter.regex(input, value) || Utils.isRegex(theFilter.regex) && !theFilter.regex.test(value))) {
                isValid = !1, error = userOptions.errors && userOptions.errors[uf] || theFilter.error;
                break;
              }
            }
          }
        }
        return {
          isValid: isValid,
          error: error
        };
      },
      analyze: function(input, evt) {
        var isRadiocheck = input.is('[type="checkbox"], [type="radio"]'), $input = function() {
          var userInputs = getUserInputs();
          return isRadiocheck ? userInputs.filter('[name="' + input.attr("name") + '"]') : userInputs.filter(input);
        }(), currentTabName = Actions.getCurrentTab($input).name, userOptions = o.inputs[input.attr("name")], value = function() {
          var val = input.val();
          if (val === input.attr("placeholder")) return;
          return isRadiocheck ? userOptions && " " : val;
        }(), $field = input.parents(".ideal-field"), $error = $field.siblings(".ideal-error"), $invalid = function() {
          return isRadiocheck ? input.parent().siblings(".ideal-icon-invalid") : input.siblings(".ideal-icon-invalid");
        }(), $valid = function() {
          return isRadiocheck ? input.parent().siblings(".ideal-icon-valid") : input.siblings(".ideal-icon-valid");
        }(), test = Actions.validate({
          input: $input,
          userOptions: userOptions
        }, value), flags = function() {
          var f = userOptions.flags ? userOptions.flags : "";
          return o.globalFlags && (f += o.globalFlags), f.split(/\s/);
        }(), doFlags = function() {
          for (var i = 0, len = flags.length, f; i < len; i++) {
            f = flags[i];
            if (!Flags[f]) break;
            Flags[f]($input, evt);
          }
        };
        console.log(userOptions), $field.removeClass("valid invalid").data("isValid", !0), $error.add($invalid).add($valid).hide(), value && test.isValid && ($error.add($invalid).hide(), $field.addClass("valid").data("isValid", !0), $valid.show()), test.isValid || ($invalid.show(), $field.addClass("invalid").data("isValid", !1), $form.find(".ideal-error").hide(), evt !== "blur" && $error.html(test.error).show()), $idealTabs.length && $idealTabs.updateCounter(currentTabName, $form.getInvalid(currentTabName).length), doFlags();
      },
      attachEvents: function() {
        getUserInputs().on("keyup change focus blur", function(e) {
          Actions.analyze($(this), e.type);
        });
      },
      responsive: function() {
        var formInputs = getFormInputs(), maxWidth = LessVars.fieldWidth + formInputs.labels.outerWidth(), $emptyLabel = formInputs.labels.filter(function() {
          return $(this).html() === "&nbsp;";
        }), $customSelect = $form.find(".ideal-select"), $datePicker = $form.find("input.hasDatepicker");
        o.responsiveAt === "auto" ? $form.width() < maxWidth ? $form.addClass("stack") : $form.removeClass("stack") : $(window).width() < o.responsiveAt ? $form.addClass("stack") : $form.removeClass("stack"), $form.is(".stack") ? ($emptyLabel.hide(), $customSelect.trigger("list")) : ($emptyLabel.show(), $customSelect.trigger("menu")), $datePicker.length && $datePicker.datepicker("hide");
      }
    }, PublicMethods = {
      addFields: function(fields) {
        fields = fields.reverse();
        var add = function(ops) {
          var name = ops.name, userOptions = {
            filters: ops.filters || "",
            data: ops.data || {},
            errors: ops.errors || {},
            flags: ops.flags || ""
          }, label = ops.label, type = ops.type, list = ops.list || "", placeholder = ops.placeholder || "", $field = $("<div><label>" + label + ":</label>" + Utils.makeInput(name, type, list, placeholder) + "</div>"), $input = $field.find("input, select, textarea, :button");
          userOptions.filters && (o.inputs[name] = userOptions), Actions.doMarkup($input), ops.addAfter ? $field.insertAfter($(Utils.getByNameOrId(ops.addAfter)).parents(".ideal-wrap")) : ops.addBefore ? $field.insertBefore($(Utils.getByNameOrId(ops.addBefore)).parents(".ideal-wrap")) : ops.appendToTab ? $field.insertAfter(Actions.getTab(ops.appendToTab).find(".ideal-wrap:last-child")) : $field.insertAfter($form.find(".ideal-wrap").last());
        };
        for (var i = 0, len = fields.length; i < len; i++) add(fields[i]);
        return $form.reload(), $form;
      },
      removeFields: function(fields) {
        var f = [];
        for (var i = 0, l = fields.length; i < l; i++) f.push(Utils.getByNameOrId(fields[i]).get(0));
        return $(f).parents(".ideal-wrap").remove(), $form;
      },
      getInvalid: function(tabName) {
        return tabName && $idealTabs.length ? Actions.getTab(tabName).find(".ideal-field").filter(function() {
          return $(this).data("isValid") === !1;
        }) : $form.find(".ideal-field").filter(function() {
          return $(this).data("isValid") === !1;
        });
      },
      isValid: function() {
        return !$form.getInvalid().length;
      },
      isValidField: function(str) {
        var $input = Utils.getByNameOrId(str);
        return $input.parents(".ideal-field").data("isValid") === !0;
      },
      focusFirst: function() {
        return $idealTabs.length ? $idealTabs.filter(":visible").find("input:first, select, textarea").focus() : $form.find("input:first, select, textarea").focus(), $form;
      },
      focusFirstInvalid: function() {
        var $first = $form.getInvalid().first(), tabName = $first.parents(".ideal-tabs-content").data("ideal-tabs-content-name");
        return $idealTabs.length && $idealTabs.switchTab({
          name: tabName
        }), $first.find("input:first, select, textarea").focus(), $form;
      },
      switchTab: function(name, idx) {
        return $idealTabs.switchTab({
          name: name,
          idx: idx
        }), $form;
      },
      nextTab: function() {
        return $idealTabs.nextTab(), $form;
      },
      prevTab: function() {
        return $idealTabs.prevTab(), $form;
      },
      firstTab: function() {
        return $idealTabs.firstTab(), $form;
      },
      lastTab: function() {
        return $idealTabs.lastTab(), $form;
      },
      fresh: function() {
        var userInputs = getUserInputs();
        return userInputs.blur().parents(".ideal-field").removeClass("valid invalid"), $idealTabs.length && $idealTabs.firstTab(), $form;
      },
      reload: function() {
        Actions.adjust(), Actions.attachEvents();
      },
      reset: function(name) {
        var formInputs = getFormInputs(), $input, type;
        return name ? ($input = Utils.getByNameOrId(name), type = Utils.getIdealType($input), (type === "text" || type === "file") && $input.val(""), type === "radiocheck" && $input.removeAttr("checked"), type === "select" && ($input.find("option").first().prop("selected", !0), $input.next(".ideal-select").trigger("reset")), $input.change().blur()) : (formInputs.text.val(""), formInputs.radiocheck.removeAttr("checked"), formInputs.select.find("option").first().prop("selected", !0), $form.find(".ideal-select").trigger("reset"), formInputs.inputs.change().blur(), $form.focusFirst()), $form;
      },
      submitData: function() {
        return $form.submit(), $form;
      }
    };
    for (var m in PublicMethods) $form[m] = PublicMethods[m];
    return $form.on({
      keydown: function(e) {
        e.which === 13 && e.preventDefault();
      },
      submit: function(e) {
        $form.isValid() ? o.onSuccess(e) : (e.preventDefault(), o.onFail(), $form.focusFirstInvalid());
      }
    }), $.extend(!0, $.idealforms.filters, o.customFilters), $.extend(!0, Flags, o.customFlags), $idealTabs.length && $idealTabs.show(), Actions.init(), Actions.attachEvents(), $form.fresh(), o.responsiveAt && ($(window).resize(Actions.responsive), Actions.responsive()), $idealTabs.length && $form.firstTab(), this;
  };
})(jQuery);